1.基础概念 
  1.1 Tomcat 是一个由一系列可配置的组件构成的Web容器，而Catalina是Tomcat的servlet容器。
  1.2 Catalina是Servlet容器实现，包含了之前讲到的所有容器组件，以及后续章节涉及到的安全、会话、集群、管理等servlet容器架构的各个方面。
  1.3 它通过松耦合的方式集成Coyote,以完成按照请求协议进行数据读写。
  1.4 同时，它还包括我们的启动入口、shell程序等。
  
2.Catalina 在Tomcat中的地位
  2.1 Tomcat的模块分层机构
      第一层          Catalina （servlet容器）
      第二层          Coyote(连接器)       Jasper(JSP引擎)
                                          JavaEL(表达式语言)
      第三层          Naming(命名服务)
      第四层          Juli(服务器日志)
  
  2.2 Tomcat 本质上是一款Servlet容器，因此 Catalina 才是Tomcat的核心，其他模块都是为Catalina提供支持的。
      比如 ： 通过 Coyote模块提供链接通信，Jasper模块提供JSP引擎，Namingtigong JNDI服务，Juli提供日志服务。
      
      
 3.Catalina 
   3.1 概述（主要组件）
       3.1.1 Catalina 负责管理server,server表示着整个服务器。
       3.1.2 server下面有  多个服务 service,每个服务都包含着多个连接器组件Connector(Coyote实现)和一个容器组件Container。
       3.1.3 在Tomcat启动的时候，会初始化一个catalina的实例。
       
   3.2 catalina各个组件的职责 
       3.2.1 catalina ： 负责解析Tomcat的配置文件，以此来创建服务器server组件，并根据命令来对其进行管理 。
       3.2.2 server ：服务器表示整个catalina servlet容器以及其他的组件，负责组装并启动servlet引擎,Tomcat连接器。
                      server通过实现lifecycle接口，提供了一种优雅的启动和关闭整个系统的方式。
       3.2.3 service ：服务是server内部的组件，，一个server包含多个service。
                       它将若干个connector组件绑定到一个container（Engine）上。
       3.2.4 connector ：连接器，处理与客户端的通信，它负责接收客户请求，然后转给相关的容器处理，最后向客户返回响应结果。
       3.2.5 container ：容器，负责处理用户的servlet请求，并返回对象给web用户。
       
       （可以根据上面的描述自己画图，把整个的结构画出来）
       
  4.Container容器结构（重点介绍）
    4.1 概述
        4.1.1 Tomcat设计了四种容器，分别是Engine,Host,Context和Wrapper。
        4.1.2 这四种容器不是平行关系，而是父子关系：
              Container 包含一个 Engine;
              Engine 包含多个 Host;
              Host 包含多个 Context;
              Context 包含多个 Wrapper;
        4.1.3 Tomcat通过一种分层的架构，使得servlet容器具有很好的灵活性。
        
    4.2 各个容器的作用
        4.2.1 Engine ：表示整个catalina的servlet引擎，用来管理多个虚拟站点，一个service最多只能有一个Engine,但是一个引擎可以包含多个Host。
        4.2.2 Host ：代表一个虚拟主机，或者说一个站点，可以给Tomcat配置多个虚拟主机地址，而一个虚拟主机下可以包含多个Context。
        4.2.3 Context ：表示一个web应用程序，一个应用程序可以包含多个Wrapper。
        4.2.4 Wrapper ：表示一个servlet，Wrapper作为容器中的最底层，不能包含子容器。
        
 *** 十分重要且实用的点来了，满满的都是干货
      我们可以通过tomcat的server.xml配置文件来加深对tomcat容器的理解。
      它的构成组建都是可以配置的，其中最外层的是server，
      其他组件按照一定的格式要求配置在这个顶层容器中。
  5. 那么Tomcat是如何管理这些容器的呢？
     你会发现这些容器具有父子关系，形成一个树形结构，你可能马上想到了设计模式中的组合模式
     没错，tomcat就是用组合模式来管理这些容器的。
     具体的实现方法是 ：所有的容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性。
     这里单容器对象指的是最底层的Wrapper，组合容器对象指的是上面的Context、Host或者Engine。
     
  
       
       
      
      
  
