1.HTTP服务器请求处理
  浏览器发给服务器一个HTTP格式的请求，HTTP服务器收到这个请求后，需要调用服务端程序来处理，
  所谓的服务端程序就是你写的java类，一般来说不同的请求需要由不同的java类来处理。
  
  1.1 HTTP服务器不直接调用业务类，而是把请求交给容器来处理，容器通过Servlet接口调用业务类，
      因此，servlet接口和servlet容器的出现，达到了HTTP服务器与业务类解耦的目的。
  1.2 而servlet接口和servlet容器这一整套规范叫做servlet规范。
  1.3 Tomcat按照servlet规范的要求实现了servlet容器，同时，它们也具有HTTP服务器的功能。
  1.4 作为java程序员，如果我们要实现新的业务功能，只需要实现一个serlvet,并把他注册到Tomcat（servlet容器）中，
      剩下的事情就由Tomcat帮我们处理了。
      
      
2.Servlet容器的工作流程
  为了解耦，HTTP服务器不直接调用servlet，而是把请求交给servlet容器进行处理。那么servlet容器又是怎样工作的呢?
  2.1 当客户请求某个资源时，HTTP服务器会用一个ServletRequest对象把客户的请求信息封装起来，
  2.2 调用servlet容器的service方法：
      2.2.1 servlet容器拿到请求后，根据请求的url和servlet的映射关系，找到相应的servlet;
      2.2.2 如果servlet还没有被加载，就用反射机制创建这个servlet，并调用servlet的init方法来完成初始化
      2.2.3 然后调用servlet的service方法来处理请求
  2.3 把servletResponse对象返回给HTTP服务器，HTTP服务器会把相应发送给客户端。
  
  因此servlet容器的工作内容主要有三个 ：
      定位 servlet；
      加载 servlet；
      调用 service；
      
      
 3.Tomcat整体架构
   我们知道，如果要设计一个系统，首先是要了解需求，我们已经了解了Tomcat要实现的两个核心功能 ： 
   3.1 处理socket连接，负责网络字节流与request和response对象的转化；
   3.2 加载和管理servlet，以及具体处理request请求。
   
   因此，Tomcat设计了两个核心组件  ： 连接器（Connector）和容器（Container）来分别做这两件事情。
   连接器负责对外交流；
   容器负责内部处理。
      
