1.连接器的组件主要有以下四个：
  EndPoint  Processor   Adapter   ProtocolHandler
  
  1.1 EndPoint 
      1.1.1 coyote 通信端点，即通信监听的接口，使具体socket接受和发送的处理器，是对传输层的抽象，因此EndPoint用来实现TCP/IP协议的。
      1.1.2 Tomcat 并没偶EndPoint接口，而是提供了一个抽象类AbstractEndPoint,里面定义了两个内部类：Acceptor和SocketProcessor.
            Acceptor用于监听socket连接请求。
            SocketProcessor用于处理接收到的socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。
      1.1.3 为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫做执行器（Executor）,后面会有讲到。
      
  1.2 Processor 
      1.2.1 coyote 的协议处理接口，如果说EndPoint是用来实现TCP/IP协议的，那么Processor用来实现HTTP协议，
      1.2.2 Processor接收来自EndPoint的socket,读取字节流解析成Tomcat request 和 response 对象，并通过Adapter将其提交到容器处理，
            Processor是对应用层协议的抽象。
            
  1.3 Adapter
      1.3.1 由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的request类来存放这些请求信息；
      1.3.2 ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是，这个request对象不是标准的servletrequest,也就意味着，不能用
            Tomcat request 作为参数来调用容器。
      1.3.3 Tomcat设计者的解决方案是引入CoyoteAdapter,这是适配器模式的经典运用，连接器调用CoyoteAdapter的service方法，传入的是Tomcat request对象，
            coyoteAdapter负责将Tomcat request 转成servletrequest，再调用容器的service方法。
            
   1.4 ProtocolHandler
       1.4.1 coyote 协议接口，通过EndPoint和Processor,实现针对具体协议的处理能力。
       1.4.2 Tomcat按照协议和IO 提供了6个实现类 ： 
             AjpNioProtocol, AjpAprProtocol, AjpNio2Protocol, Http11NioProtocol,Http11Nio2Protocol,Http11AprProtocol.
       1.4.3 我们再配置tomcat/conf/server.xml 时，至少要指定具体的ProtocolHandler，当然也可以指定协议名称 : 如 HTTP/1.1 ,如果安装了APR,那么
             将使用Http11AprProtocol，否则，使用Http11NioProtocol。
            
            
    
