1.架构介绍
  Coyote 是 Tomcat 的连接器框架的名称，是Tomcat服务器提供的供客户端访问的外部接口。
  客户端通过Coyote与服务器建立连接，发送请求并接受响应。
  
  Coyote封装了底层的网络通信（socket请求及响应处理），为Catalina容器提供了统一的接口，使Catalina容器与具体的请求协议及IO 操作方式完全解耦。
  Coyote将socket输入转换为request对象，交给Catalina容器进行处理；处理请求完成后，Catalina通过coyote提供的response对象将结果写入输出流。
  
  coyote作为独立的模块，只负责具体协议和IO的相关操作，与servlet规范实现没有直接关系，
  因此，即便是request和response对象也并未实现servlet规范对应的接口，
       而是在Catalina中将他们进一步封装为servletrequest和servletresponse.
       
   请求-----> coyote（封装）--->request--->servletrequest---->catalina
                    响应<-----resoonse <---- srevletresponse<---- 
                    
                    
 2.IO模型与协议
   在Coyote中，Tomcat支持多种IO模型和应用层协议，具体包含如下：
   2.1 IO模型：（自8.5/9.0 版本开始，Tomcat移除了对BIO的支持）
       2.1.1 NIO : 非阻塞IO,采用Java NIO类库实现；
       2.1.2 NIO2 : 异步IO，采用JDK 7 的NIO2类库实现；
       2.1.3 APR : 采用apache可移植运行库实现，使c/c++编写的本地库。如果选择该方案，需要独立安装APR库。
       
   2.2 应用层协议：
       2.2.1 HTTP/1.1 : 这是大部分web应用采用的访问协议；
       2.2.2 AJP : 用于和web服务器集成（如Apache），以实现对静态资源的优化以及集群部署，当前支持AJP/1.3;
       2.2.3 HTTP/2 : HTTP2.0 大幅度提升了web性能，下一代HTTP协议，自8.5/9.0 版本之后支持。
       
       
  【小结】
        Tomcat为了实现支持多种I/O模型和应用层协议，一个容器可能对接多个连接器，就好比一个房间有多个门。
        但是单独的连接器或者容器都不能对外提供服务，需要把他们组装起来才能工作，组装后的整体叫做service组件。
        请注意：service本省并没有做什么重要的事情，只是在连接器和容器外面多包了一层，把他们组装在一起。
        Tomcat内可能有多个service,这样的设计也是出于灵活性的考虑。
        通过在Tomcat中配置多个service,可以实现通过不同的端口号来访问同一台机器上部署的不同应用。****（这个很关键）
